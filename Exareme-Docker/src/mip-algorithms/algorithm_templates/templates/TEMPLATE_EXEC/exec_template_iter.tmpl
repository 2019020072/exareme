from functools import wraps
import sys, io
import json

from ${TEMPLATE}.${template}_lib import get_data, local_init,  global_init, local_step, global_step, \
    local_final, global_final, termination_condition

# Enter values below and run
args_algorithm = ${alg_args}

args_exareme = {
    "input_local_DB"               : "${data_path}",
    "cur_state_pkl"                : "",
    "prev_state_pkl"               : "",
    "local_step_dbs"               : "",
    "global_step_db"               : "",
    "data_table"                   : 'data',
    "metadata_table"               : "metadata",
    "metadata_code_column"         : "code",
    "metadata_isCategorical_column": 'isCategorical',
}


class Arguments:
    def __init__(self, args):
        for k, v, in args.items():
            setattr(self, k, v)


def capture_stdout(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        # Capture stdout
        old_stdout = sys.stdout
        sys.stdout = new_stdout = io.StringIO()
        func(*args, **kwargs)
        func_out = new_stdout.getvalue()
        sys.stdout = old_stdout
        new_stdout.close()
        return func_out

    return wrapper


# Add wrapper to termination_condition to capture result from stdout
termination_condition = capture_stdout(termination_condition)


def run():
    args = Arguments(dict(args_algorithm.items() + args_exareme.items()))

    # LOCAL INIT
    local_in = get_data(args)
    local_state, local_out = local_init(args, local_in=local_in)
    # GLOBAL INIT
    global_state, global_out = global_init(args, global_in=local_out)

    while True:
        # LOCAL STEP
        local_state, local_out = local_step(args, local_state=local_state.get_data(), local_in=global_out)
        # GLOBAL STEP
        global_state, global_out = global_step(args, global_state=global_state.get_data(), global_in=local_out)
        # TERMINATION CHECK
        if termination_condition(args, global_state=global_state.get_data()) == 'STOP':
            break

    # LOCAL FINAL
    local_out = local_final(args, local_state=local_state.get_data(), local_in=global_out)
    # GLOBAL INIT
    global_out = global_init(args, global_state=global_state.get_data(), global_in=local_out)

    # Format output
    parsed = json.loads(global_out)
    print(json.dumps(parsed, indent=4, sort_keys=True))


if __name__ == '__main__':
    run()
